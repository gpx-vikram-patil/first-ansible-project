- hosts: DEV
  gather_facts: yes
  become: yes
  
  tasks:

  - name: create directories if they doesn't exist
    file: 
      path: /home/deployment/app/{{item}}
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
    loop:
      - jars
      - configs
      - scripts
      - output
      - payexLogs
      - dump

     
  - name: set the 'dirname' variable for backup directory
    set_fact:
      dirname: "{{ ansible_date_time.iso8601_basic_short }}"
  
  - name: create backup directory
    file:
      path: /home/ubuntu/backups/{{ ansible_date_time.date }}/{{ dirname }}
      state: directory
      mode: '0777'
      owner: root
      group: root

  - name: backup microservice jar file to backup directory
    copy:
      src: /home/deployment/app/jars/{{ service_name }}-1.0-SNAPSHOT.jar
      dest: /home/ubuntu/backups/{{ ansible_date_time.date }}/{{ dirname }}
      remote_src: yes
      owner: root
      group: root
      mode: '0777'

  - name: download microservice jar file from nexus
    get_url:
      url: '{{ URL }}'
      dest: /home/deployment/app/jars/{{ service_name }}-1.0-SNAPSHOT.jar
      force: yes
      username: '{{ nexus_username }}'
      password: '{{ nexus_password }}'
      mode: '0775'
      owner: '{{ devuser }}'
      group: '{{ devuser }}'

  - name: transfer and run the stop-service script
    script: stop-{{ service_name }}.sh
    register: stopresult
    ignore_errors: yes
   
  - name: display the output of stop script
    debug: var=stopresult
  
  - name: Pause for 5 seconds for service to stop
    pause:
      seconds: 5
 
  - name: transfer and run the start-service script
    script: start-{{ service_name }}.sh
    become_user: "{{ devuser }}"
    register: startresult
    ignore_errors: yes
    
  - name: display the output of start script
    debug: var=startresult
 
  - name: Pause for 5 seconds for service to start
    pause:
      seconds: 5
      
  - name: check service status
    shell: "ps -ef | grep {{ service_name }}"
    register: servicestatus
    ignore_errors: yes
    
  - name: display the status of deployed service
    debug: var=servicestatus
