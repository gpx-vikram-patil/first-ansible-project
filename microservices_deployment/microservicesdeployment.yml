- hosts: DEV
  gather_facts: yes
  become: yes
  
  tasks:
  
  - name: create 'scripts' directory if it does not exist
    file:
      path: /home/deployment/app/scripts
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
      
  - name: create 'jars' directory if it does not exist
    file:
      path: /home/deployment/app/jars
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
   
  - name: create 'dump' directory if it does not exist
    file:
      path: /home/deployment/app/dump
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
      
  - name: create 'payexLogs' directory if it does not exist
    file:
      path: /home/deployment/app/payexLogs
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
      
  - name: create 'output' directory if it does not exist
    file:
      path: /home/deployment/app/output
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
      
  - name: create 'configs' directory if it does not exist
    file:
      path: /home/deployment/app/configs
      state: directory
      owner: '{{ devuser }}'
      group: '{{ devuser }}'
      mode: '0755'
      
  - name: set the dirname variable
    ansible.builtin.set_fact:
      dirname: "{{ ansible_date_time.iso8601_basic_short }}"
  
  - name: create backup directory
    file:
      path: /home/ubuntu/backups/{{ ansible_date_time.date }}/{{ dirname }}
      state: directory
      mode: '0777'
      owner: root
      group: root

  - name: backup microservice jar file
    ansible.builtin.copy:
      src: /home/deployment/app/jars/{{ service_name }}-1.0-SNAPSHOT.jar
      dest: /home/ubuntu/backups/{{ ansible_date_time.date }}/{{ dirname }}
      remote_src: yes
      owner: root
      group: root
      mode: '0777'

  - name: download microservice jar file from nexus
    ansible.builtin.get_url:
      url: '{{ URL }}'
      dest: /home/deployment/app/jars/{{ service_name }}-1.0-SNAPSHOT.jar
      force: yes
      username: '{{ nexus_username }}'
      password: '{{ nexus_password }}'
      mode: '0775'
      owner: '{{ devuser }}'
      group: '{{ devuser }}'

  - name: transfer the stop script
    script:
      become_user: '{{ devuser }}'
      src: stop-{{ service_name }}.sh
      #dest: /home/deployment/app/scripts
      #force: yes
      #owner: '{{ devuser }}'
      #group: '{{ devuser }}'
      #mode: '0775'
      register: stopresult
   
  #- name: execute a stop script
  #  command: su techteam -c "sh  /home/deployment/app/scripts/stop-{{ service_name }}.sh"
  #  register: stopresult
  #  ignore_errors: yes
  
  - name: display the output of stop script
    debug: var=stopresult
  
  - name: Pause for 5 seconds for service to stop
    ansible.builtin.pause:
      seconds: 5
 
  - name: transfer the start script
    script:
      become_user: '{{ devuser }}'
      src: start-{{ service_name }}.sh
      #dest: /home/deployment/app/scripts
      #force: yes
      #owner: '{{ devuser }}'
      #group: '{{ devuser }}'
      #mode: '0775'
      register: startresult
      ignore_errors: yes
      
  #- name: execute a start script
  #  command: su techteam -c "sh  /home/deployment/app/scripts/start-{{ service_name }}.sh"
  #  register: startresult
  #  ignore_errors: yes
   
  - name: display the output of start script
    debug: var=startresult
 
  - name: Pause for 5 seconds for service to start
    ansible.builtin.pause:
      seconds: 5
      
  - name: check service status
    shell: "ps -ef | grep {{ service_name }}"
    register: servicestatus
    ignore_errors: yes
    
  - name: display the output of status script
    debug: var=servicestatus
